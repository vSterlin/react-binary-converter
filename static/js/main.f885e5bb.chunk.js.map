{"version":3,"sources":["components/Button.js","components/TextArrea.js","components/ConvertContext.js","components/Header.js","icons/icon.svg","components/BinaryCalculator.js","components/HexCalculator.js","components/Calculator.js","components/App.js","index.js"],"names":["Button","call","e","target","blur","props","onClick","onTouchStartHandler","style","backgroundColor","borderColor","onTouchEndHandler","id","this","className","onTouchStart","onTouchEnd","butType","React","Component","TextArrea","rows","cols","placeholder","readOnly","readonly","value","onChange","Context","createContext","convertConfig","binary","main","sec","link","hex","Header","href","converter","alt","width","src","icon","to","contextType","ConvertContext","module","exports","conversionConfig","decToBin","function","binToDec","Calculator","state","convertedValue","conversionType","inputReceiver","event","input","setState","val","length","remainder","bin","newVal","parseInt","Math","floor","console","log","textArea","document","getElementById","i","charAt","pow","swap","eval","decToHex","hexToDec","temp","App","basename","process","exact","path","render","BinaryCalculator","HexCalculator","ReactDOM","querySelector"],"mappings":"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","file":"static/js/main.f885e5bb.chunk.js","sourcesContent":["import React from 'react';\nclass Button extends React.Component {\n\n\n  call = (e) => {\n    e.target.blur();\n    this.props.onClick();\n  }\n\n  onTouchStartHandler = (e) => {\n    e.target.style.backgroundColor = '#5a6268';\n    e.target.style.borderColor = '#545b62';\n  }\n  onTouchEndHandler = (e) => {\n    e.target.style.backgroundColor = '#6c757d';\n    e.target.style.borderColor = '#6c757d';\n  }\n\n\n  render(){\n    return(\n      <button id={this.props.id} className=\"btn btn-secondary\" onTouchStart={(e) => {this.onTouchStartHandler(e)}} onTouchEnd={(e) => {this.onTouchEndHandler(e)}} onClick={(e) => this.call(e)} >{this.props.butType}</button>\n    );\n  }\n}\n\nexport default Button;\n\n","import React from \"react\";\n\nclass TextArrea extends React.Component {\n  \n  render() {\n    return (\n      <textarea\n        id=\"textarr\"\n        rows=\"3\"\n        cols=\"30\"\n        placeholder={this.props.placeholder}\n        readOnly={this.props.readonly}\n        value={this.props.value}\n        onChange={this.props.onChange}\n      />\n    );\n  }\n}\n\nexport default TextArrea;\n","import React from 'react';\n\nconst Context = React.createContext('Binary');\n\nexport class ConvertStore extends React.Component {\n\n  state = { converter: 'Binary'};\n\n  onConvertChange = (converter) => {\n    this.setState({converter});\n  }\n\n  render() {\n    return(\n      <Context.Provider value={{...this.state, onConvertChange: this.onConvertChange }}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport default Context;\n\n","import React from \"react\";\nimport icon from '../icons/icon.svg'\nimport ConvertContext from './ConvertContext';\nimport {Link} from 'react-router-dom';\nconst convertConfig = {\n  binary:{\n    main: 'Binary',\n    sec: 'Hex',\n    link: '/hex'\n  },\n  hex:{\n    main: 'Hex',\n    sec: 'Binary',\n    link: '/'\n  }\n}\nclass Header extends React.Component {\n   static contextType = ConvertContext;\n\n\n  render() {\n    \n    return (\n      \n      <header>\n        <div className=\"navbar navbar-dark bg-dark\">\n          <div className=\"d-flex justify-content-start\">\n            <a className=\"navbar-brand\" href=\"#\">\n              {convertConfig[this.props.converter].main} Converter{\" \"}\n              <img className=\"icon\" alt=\"\" width=\"25\" src={icon} />\n            </a>\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item pull-right\"><Link className=\"nav-link\"  to={convertConfig[this.props.converter].link}>Switch To {convertConfig[this.props.converter].sec} Converter</Link></li>\n      </ul>\n            \n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","module.exports = __webpack_public_path__ + \"static/media/icon.21965593.svg\";","import React from \"react\";\nimport Button from \"./Button\";\nimport TextArrea from \"./TextArrea\";\nimport Header from './Header';\n\n\nconst conversionConfig = {\n  decToBin : {\n    placeholder : \"Enter decimal number here\",\n    function: 'decToBin'\n  },  binToDec : {\n    placeholder : \"Enter binary number here\",\n    function: 'binToDec'\n\n  }\n\n}\nclass Calculator extends React.Component {\n  state = {\n    value: \"\",\n    convertedValue: \"\",\n    conversionType: \"decToBin\"\n  };\n\n\n\n\n  inputReceiver = (event) => {\n   const input = (event.target.value);\n    this.setState({ value:  input});\n\n  }\n  decToBin = () => {\n    let val = this.state.value;\n    if(val.length!==0){\n    val = parseInt(val);\n    let bin = '';\n    let newVal = val;\n    let remainder;\n    \n    while(newVal!==0){\n        remainder = (newVal%2);\n        newVal = Math.floor(newVal /= 2);\n        //console.log(remainder);\n        bin = remainder + bin;\n    }\n    \n    //textArea.innerHTML = '';\n    this.setState({convertedValue: bin});\n    }\n    this.setState({value: ''});\n\n    console.log('CONVERTING DECIMAL TO BINARY!');\n    }\n\n    binToDec = () => {\n      let textArea = document.getElementById('textarr');\n      let val = this.state.value;\n      val += '';\n      let temp;\n      let newVal = 0;\n      let length = val.length;\n      if(val.length!==0){\n      \n      for(let i=0;i<length;i++){\n      temp = parseInt(val.charAt(i));\n      //console.log(temp);\n      newVal += temp * Math.pow(2, length-1-i);\n      \n      \n      }\n      //textArea.innerHTML = '';\n      textArea.value= \"\";\n    this.setState({convertedValue: newVal});\n      //console.log(newVal);\n      }\n\n      this.setState({value: ''});\n\n      }\n    // binToDec = () => {\n    //   console.log('CONVERTING BINARY TO DECIMAl!');\n\n    // }\n\n\n \n\n  swap = () => {\n    if (this.state.conversionType === \"decToBin\") {\n      this.setState({conversionType: 'binToDec'});\n      console.log(\"DECIMAL TO BINARY\");\n    }\n    else{\n      this.setState({conversionType: 'decToBin'})\n        console.log(\"BIN TO DEC\");\n    \n    }\n\n    this.setState({value: '', convertedValue: ''});\n\n    //console.log(swapBtn.onclick);\n  };\n\n  \n  render() {\n    return (\n      <div>\n        <Header converter=\"binary\" />\n      <div className=\"calc\">\n        \n        <TextArrea value={this.state.value} onChange={this.inputReceiver} placeholder={conversionConfig[this.state.conversionType].placeholder} readonly={false} />\n        <div className=\"buts\">\n\n          <Button id=\"sub\" butType=\"Submit\" onClick={eval('this.'+conversionConfig[this.state.conversionType].function)} />\n          <Button id=\"swap\" butType=\"Swap\" onClick={this.swap} />\n        </div>\n        <TextArrea value={this.state.convertedValue} placeholder=\"\" readonly={true} />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport TextArrea from \"./TextArrea\";\nimport Header from \"./Header\";\n\nconst conversionConfig = {\n  decToHex: {\n    placeholder: \"Enter decimal number here\",\n    function: \"decToHex\"\n  },\n  hexToDec: {\n    placeholder: \"Enter hexadecimal number here\",\n    function: \"hexToDec\"\n  }\n};\nclass Calculator extends React.Component {\n  state = {\n    value: \"\",\n    convertedValue: \"\",\n    conversionType: \"decToHex\"\n  };\n\n  inputReceiver = event => {\n    const input = event.target.value;\n    this.setState({ value: input });\n  };\n  decToHex = () => {\n    let val = this.state.value;\n    if (val.length !== 0) {\n      val = parseInt(val);\n      let hex = \"\";\n      let newVal = val;\n      let remainder;\n\n      while (newVal !== 0) {\n        remainder = newVal % 16;\n        newVal = Math.floor((newVal /= 16));\n        //console.log(remainder);\n        switch (remainder) {\n          case 10:\n            remainder = \"A\";\n            break;\n          case 11:\n            remainder = \"B\";\n            break;\n          case 12:\n            remainder = \"C\";\n            break;\n          case 13:\n            remainder = \"D\";\n            break;\n          case 14:\n            remainder = \"E\";\n            break;\n          case 15:\n            remainder = \"F\";\n            break;\n          default:\n            break;\n        }\n        hex = remainder + hex;\n      }\n\n      //textArea.innerHTML = '';\n      this.setState({ convertedValue: hex });\n    }\n    this.setState({ value: \"\" });\n\n    console.log(\"CONVERTING DECIMAL TO BINARY!\");\n  };\n\n  hexToDec = () => {\n    let textArea = document.getElementById(\"textarr\");\n    let val = this.state.value;\n    val += \"\";\n    let temp;\n    let newVal = 0;\n    let length = val.length;\n    if (val.length !== 0) {\n      for (let i = 0; i < length; i++) {\n        temp = (val.charAt(i));\n        switch (temp) {\n          case 'A':\n              temp = 10;\n            break;\n          case 'B':\n              temp = 11;\n            break;\n          case 'C':\n              temp = 12;\n            break;\n          case 'D':\n              temp = 13;\n            break;\n          case 'E':\n              temp = 14;\n            break;\n          case 'F':\n              temp = 15;\n            break;\n          default:\n            temp = parseInt(temp);\n            break;\n        }\n\n        //console.log(temp);\n        newVal += temp * Math.pow(16, length - 1 - i);\n      }\n      //textArea.innerHTML = '';\n      textArea.value = \"\";\n      this.setState({ convertedValue: newVal });\n      //console.log(newVal);\n    }\n\n    this.setState({ value: \"\" });\n  };\n  // binToDec = () => {\n  //   console.log('CONVERTING BINARY TO DECIMAl!');\n\n  // }\n\n  swap = () => {\n    if (this.state.conversionType === \"decToHex\") {\n      this.setState({ conversionType: \"hexToDec\" });\n    } else {\n      this.setState({ conversionType: \"decToHex\" });\n    }\n\n    this.setState({ value: \"\", convertedValue: \"\" });\n\n    //console.log(swapBtn.onclick);\n  };\n\n  render() {\n    return (\n      <div>\n        <Header converter=\"hex\" />\n        <div className=\"calc\">\n          <TextArrea\n            value={this.state.value}\n            onChange={this.inputReceiver}\n            placeholder={\n              conversionConfig[this.state.conversionType].placeholder\n            }\n            readonly={false}\n          />\n          <div className=\"buts\">\n            <Button\n              id=\"sub\"\n              butType=\"Submit\"\n              onClick={eval(\n                \"this.\" + conversionConfig[this.state.conversionType].function\n              )}\n            />\n            <Button id=\"swap\" butType=\"Swap\" onClick={this.swap} />\n          </div>\n          <TextArrea\n            value={this.state.convertedValue}\n            placeholder=\"\"\n            readonly={true}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport TextArrea from \"./TextArrea\";\n\n\n\nconst conversionConfig = {\n  decToBin : {\n    placeholder : \"Enter decimal number here\",\n    function: 'decToBin'\n  },  binToDec : {\n    placeholder : \"Enter binary number here\",\n    function: 'binToDec'\n\n  }\n\n}\nclass Calculator extends React.Component {\n  state = {\n    value: \"\",\n    convertedValue: \"\",\n    conversionType: \"decToBin\"\n  };\n\n\n\n\n  inputReceiver = (event) => {\n   const input = (event.target.value);\n    this.setState({ value:  input});\n\n  }\n  decToBin = () => {\n    let val = this.state.value;\n    if(val.length!==0){\n    val = parseInt(val);\n    let bin = '';\n    let newVal = val;\n    let remainder;\n    \n    while(newVal!==0){\n        remainder = (newVal%2);\n        newVal = Math.floor(newVal /= 2);\n        //console.log(remainder);\n        bin = remainder + bin;\n    }\n    \n    //textArea.innerHTML = '';\n    this.setState({convertedValue: bin});\n    }\n    this.setState({value: ''});\n\n    console.log('CONVERTING DECIMAL TO BINARY!');\n    }\n\n    binToDec = () => {\n      let textArea = document.getElementById('textarr');\n      let val = this.state.value;\n      val += '';\n      let temp;\n      let newVal = 0;\n      let length = val.length;\n      if(val.length!==0){\n      \n      for(let i=0;i<length;i++){\n      temp = parseInt(val.charAt(i));\n      //console.log(temp);\n      newVal += temp * Math.pow(2, length-1-i);\n      \n      \n      }\n      //textArea.innerHTML = '';\n      textArea.value= \"\";\n    this.setState({convertedValue: newVal});\n      //console.log(newVal);\n      }\n\n      this.setState({value: ''});\n\n      }\n    // binToDec = () => {\n    //   console.log('CONVERTING BINARY TO DECIMAl!');\n\n    // }\n\n    decToHex = () => {\n      let val = this.state.value;\n      if(val.length!==0){\n      val = parseInt(val);\n      let bin = '';\n      let newVal = val;\n      let remainder;\n      \n      while(newVal!==0){\n          remainder = (newVal%16);\n          newVal = Math.floor(newVal /= 16);\n          //console.log(remainder);\n          bin = remainder + bin;\n      }\n      \n      //textArea.innerHTML = '';\n      this.setState({convertedValue: bin});\n      }\n      this.setState({value: ''});\n  \n      console.log('CONVERTING DECIMAL TO BINARY!');\n      }\n\n \n\n  swap = () => {\n    if (this.state.conversionType === \"decToBin\") {\n      this.setState({conversionType: 'binToDec'});\n      console.log(\"DECIMAL TO BINARY\");\n    }\n    else{\n      this.setState({conversionType: 'decToBin'})\n        console.log(\"BIN TO DEC\");\n    \n    }\n\n    this.setState({value: '', convertedValue: ''});\n\n    //console.log(swapBtn.onclick);\n  };\n\n  \n  render() {\n    return (\n      <div className=\"calc\">\n        <TextArrea value={this.state.value} onChange={this.inputReceiver} placeholder={conversionConfig[this.state.conversionType].placeholder} readonly={false} />\n        <div className=\"buts\">\n\n          <Button id=\"sub\" butType=\"Submit\" onClick={eval('this.'+conversionConfig[this.state.conversionType].function)} />\n          <Button id=\"swap\" butType=\"Swap\" onClick={this.swap} />\n        </div>\n        <TextArrea value={this.state.convertedValue} placeholder=\"\" readonly={true} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport Header from './Header';\nimport Calculator from './Calculator';\nimport BinaryCalculator from './BinaryCalculator';\nimport HexCalculator from './HexCalculator';\nimport '../styles/App.css';\nimport {\n  BrowserRouter as Router, HashRouter,\n  Route, Link, Redirect, withRouter\n} from 'react-router-dom'\n\n//import {ConvertStore} from './ConvertContext';\n\nclass App extends React.Component {\n\n  render(){\n    return(\n      <div>\n        <HashRouter basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/\" render={() =>  <BinaryCalculator />} />\n      <Route path=\"/hex\" render={() => <HexCalculator />} />\n      </HashRouter>\n      </div>\n\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}